# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tum_alle_common_msgs/srvFreeSpaceRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import tum_alle_common_msgs.msg
import std_msgs.msg
import sensor_msgs.msg

class srvFreeSpaceRequest(genpy.Message):
  _md5sum = "baf0b698a26759e3909c3ff8518a5d4d"
  _type = "tum_alle_common_msgs/srvFreeSpaceRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """msg2DRecognition clust2D

================================================================================
MSG: tum_alle_common_msgs/msg2DRecognition
sensor_msgs/Image       image
sensor_msgs/Image       depth_image
geometry_msgs/Transform transform
msg2DPrediction[]       predictions2D

================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of cameara
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: tum_alle_common_msgs/msg2DPrediction
string    label
float64   confidence
int32[4]  rect
#geometry_msgs/Point[] object_centers
"""
  __slots__ = ['clust2D']
  _slot_types = ['tum_alle_common_msgs/msg2DRecognition']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       clust2D

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(srvFreeSpaceRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.clust2D is None:
        self.clust2D = tum_alle_common_msgs.msg.msg2DRecognition()
    else:
      self.clust2D = tum_alle_common_msgs.msg.msg2DRecognition()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.clust2D.image.header.seq, _x.clust2D.image.header.stamp.secs, _x.clust2D.image.header.stamp.nsecs))
      _x = self.clust2D.image.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.clust2D.image.height, _x.clust2D.image.width))
      _x = self.clust2D.image.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.clust2D.image.is_bigendian, _x.clust2D.image.step))
      _x = self.clust2D.image.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.clust2D.depth_image.header.seq, _x.clust2D.depth_image.header.stamp.secs, _x.clust2D.depth_image.header.stamp.nsecs))
      _x = self.clust2D.depth_image.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.clust2D.depth_image.height, _x.clust2D.depth_image.width))
      _x = self.clust2D.depth_image.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.clust2D.depth_image.is_bigendian, _x.clust2D.depth_image.step))
      _x = self.clust2D.depth_image.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.clust2D.transform.translation.x, _x.clust2D.transform.translation.y, _x.clust2D.transform.translation.z, _x.clust2D.transform.rotation.x, _x.clust2D.transform.rotation.y, _x.clust2D.transform.rotation.z, _x.clust2D.transform.rotation.w))
      length = len(self.clust2D.predictions2D)
      buff.write(_struct_I.pack(length))
      for val1 in self.clust2D.predictions2D:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_d().pack(val1.confidence))
        buff.write(_get_struct_4i().pack(*val1.rect))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.clust2D is None:
        self.clust2D = tum_alle_common_msgs.msg.msg2DRecognition()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.clust2D.image.header.seq, _x.clust2D.image.header.stamp.secs, _x.clust2D.image.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.clust2D.image.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.clust2D.image.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.clust2D.image.height, _x.clust2D.image.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.clust2D.image.encoding = str[start:end].decode('utf-8')
      else:
        self.clust2D.image.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.clust2D.image.is_bigendian, _x.clust2D.image.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.clust2D.image.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.clust2D.depth_image.header.seq, _x.clust2D.depth_image.header.stamp.secs, _x.clust2D.depth_image.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.clust2D.depth_image.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.clust2D.depth_image.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.clust2D.depth_image.height, _x.clust2D.depth_image.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.clust2D.depth_image.encoding = str[start:end].decode('utf-8')
      else:
        self.clust2D.depth_image.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.clust2D.depth_image.is_bigendian, _x.clust2D.depth_image.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.clust2D.depth_image.data = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.clust2D.transform.translation.x, _x.clust2D.transform.translation.y, _x.clust2D.transform.translation.z, _x.clust2D.transform.rotation.x, _x.clust2D.transform.rotation.y, _x.clust2D.transform.rotation.z, _x.clust2D.transform.rotation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.clust2D.predictions2D = []
      for i in range(0, length):
        val1 = tum_alle_common_msgs.msg.msg2DPrediction()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8')
        else:
          val1.label = str[start:end]
        start = end
        end += 8
        (val1.confidence,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 16
        val1.rect = _get_struct_4i().unpack(str[start:end])
        self.clust2D.predictions2D.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.clust2D.image.header.seq, _x.clust2D.image.header.stamp.secs, _x.clust2D.image.header.stamp.nsecs))
      _x = self.clust2D.image.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.clust2D.image.height, _x.clust2D.image.width))
      _x = self.clust2D.image.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.clust2D.image.is_bigendian, _x.clust2D.image.step))
      _x = self.clust2D.image.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.clust2D.depth_image.header.seq, _x.clust2D.depth_image.header.stamp.secs, _x.clust2D.depth_image.header.stamp.nsecs))
      _x = self.clust2D.depth_image.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.clust2D.depth_image.height, _x.clust2D.depth_image.width))
      _x = self.clust2D.depth_image.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.clust2D.depth_image.is_bigendian, _x.clust2D.depth_image.step))
      _x = self.clust2D.depth_image.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.clust2D.transform.translation.x, _x.clust2D.transform.translation.y, _x.clust2D.transform.translation.z, _x.clust2D.transform.rotation.x, _x.clust2D.transform.rotation.y, _x.clust2D.transform.rotation.z, _x.clust2D.transform.rotation.w))
      length = len(self.clust2D.predictions2D)
      buff.write(_struct_I.pack(length))
      for val1 in self.clust2D.predictions2D:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_d().pack(val1.confidence))
        buff.write(val1.rect.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.clust2D is None:
        self.clust2D = tum_alle_common_msgs.msg.msg2DRecognition()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.clust2D.image.header.seq, _x.clust2D.image.header.stamp.secs, _x.clust2D.image.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.clust2D.image.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.clust2D.image.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.clust2D.image.height, _x.clust2D.image.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.clust2D.image.encoding = str[start:end].decode('utf-8')
      else:
        self.clust2D.image.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.clust2D.image.is_bigendian, _x.clust2D.image.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.clust2D.image.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.clust2D.depth_image.header.seq, _x.clust2D.depth_image.header.stamp.secs, _x.clust2D.depth_image.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.clust2D.depth_image.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.clust2D.depth_image.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.clust2D.depth_image.height, _x.clust2D.depth_image.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.clust2D.depth_image.encoding = str[start:end].decode('utf-8')
      else:
        self.clust2D.depth_image.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.clust2D.depth_image.is_bigendian, _x.clust2D.depth_image.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.clust2D.depth_image.data = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.clust2D.transform.translation.x, _x.clust2D.transform.translation.y, _x.clust2D.transform.translation.z, _x.clust2D.transform.rotation.x, _x.clust2D.transform.rotation.y, _x.clust2D.transform.rotation.z, _x.clust2D.transform.rotation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.clust2D.predictions2D = []
      for i in range(0, length):
        val1 = tum_alle_common_msgs.msg.msg2DPrediction()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8')
        else:
          val1.label = str[start:end]
        start = end
        end += 8
        (val1.confidence,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 16
        val1.rect = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=4)
        self.clust2D.predictions2D.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_BI = None
def _get_struct_BI():
    global _struct_BI
    if _struct_BI is None:
        _struct_BI = struct.Struct("<BI")
    return _struct_BI
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4i = None
def _get_struct_4i():
    global _struct_4i
    if _struct_4i is None:
        _struct_4i = struct.Struct("<4i")
    return _struct_4i
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tum_alle_common_msgs/srvFreeSpaceResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import tum_alle_common_msgs.msg
import geometry_msgs.msg
import std_msgs.msg

class srvFreeSpaceResponse(genpy.Message):
  _md5sum = "9ded637c096954c41cf2482a7ee7f728"
  _type = "tum_alle_common_msgs/srvFreeSpaceResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Point[] left_cluster
geometry_msgs/Point[] left_of
geometry_msgs/Point[] right_cluster
geometry_msgs/Point[] right_of

msg3DPrediction[] unknown_objects
geometry_msgs/Point[] unknown_left_cluster
geometry_msgs/Point[] unknown_left_of
geometry_msgs/Point[] unknown_right_cluster
geometry_msgs/Point[] unknown_right_of


================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: tum_alle_common_msgs/msg3DPrediction
string                      frame
geometry_msgs/PointStamped  point
geometry_msgs/Vector3       size
string                      label
float32                     confidence

================================================================================
MSG: geometry_msgs/PointStamped
# This represents a Point with reference coordinate frame and timestamp
Header header
Point point

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['left_cluster','left_of','right_cluster','right_of','unknown_objects','unknown_left_cluster','unknown_left_of','unknown_right_cluster','unknown_right_of']
  _slot_types = ['geometry_msgs/Point[]','geometry_msgs/Point[]','geometry_msgs/Point[]','geometry_msgs/Point[]','tum_alle_common_msgs/msg3DPrediction[]','geometry_msgs/Point[]','geometry_msgs/Point[]','geometry_msgs/Point[]','geometry_msgs/Point[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       left_cluster,left_of,right_cluster,right_of,unknown_objects,unknown_left_cluster,unknown_left_of,unknown_right_cluster,unknown_right_of

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(srvFreeSpaceResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.left_cluster is None:
        self.left_cluster = []
      if self.left_of is None:
        self.left_of = []
      if self.right_cluster is None:
        self.right_cluster = []
      if self.right_of is None:
        self.right_of = []
      if self.unknown_objects is None:
        self.unknown_objects = []
      if self.unknown_left_cluster is None:
        self.unknown_left_cluster = []
      if self.unknown_left_of is None:
        self.unknown_left_of = []
      if self.unknown_right_cluster is None:
        self.unknown_right_cluster = []
      if self.unknown_right_of is None:
        self.unknown_right_of = []
    else:
      self.left_cluster = []
      self.left_of = []
      self.right_cluster = []
      self.right_of = []
      self.unknown_objects = []
      self.unknown_left_cluster = []
      self.unknown_left_of = []
      self.unknown_right_cluster = []
      self.unknown_right_of = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.left_cluster)
      buff.write(_struct_I.pack(length))
      for val1 in self.left_cluster:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.left_of)
      buff.write(_struct_I.pack(length))
      for val1 in self.left_of:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.right_cluster)
      buff.write(_struct_I.pack(length))
      for val1 in self.right_cluster:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.right_of)
      buff.write(_struct_I.pack(length))
      for val1 in self.right_of:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.unknown_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.unknown_objects:
        _x = val1.frame
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v1 = val1.point
        _v2 = _v1.header
        buff.write(_get_struct_I().pack(_v2.seq))
        _v3 = _v2.stamp
        _x = _v3
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v2.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v4 = _v1.point
        _x = _v4
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v5 = val1.size
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_f().pack(val1.confidence))
      length = len(self.unknown_left_cluster)
      buff.write(_struct_I.pack(length))
      for val1 in self.unknown_left_cluster:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.unknown_left_of)
      buff.write(_struct_I.pack(length))
      for val1 in self.unknown_left_of:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.unknown_right_cluster)
      buff.write(_struct_I.pack(length))
      for val1 in self.unknown_right_cluster:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.unknown_right_of)
      buff.write(_struct_I.pack(length))
      for val1 in self.unknown_right_of:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.left_cluster is None:
        self.left_cluster = None
      if self.left_of is None:
        self.left_of = None
      if self.right_cluster is None:
        self.right_cluster = None
      if self.right_of is None:
        self.right_of = None
      if self.unknown_objects is None:
        self.unknown_objects = None
      if self.unknown_left_cluster is None:
        self.unknown_left_cluster = None
      if self.unknown_left_of is None:
        self.unknown_left_of = None
      if self.unknown_right_cluster is None:
        self.unknown_right_cluster = None
      if self.unknown_right_of is None:
        self.unknown_right_of = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.left_cluster = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.left_cluster.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.left_of = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.left_of.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.right_cluster = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.right_cluster.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.right_of = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.right_of.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.unknown_objects = []
      for i in range(0, length):
        val1 = tum_alle_common_msgs.msg.msg3DPrediction()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.frame = str[start:end].decode('utf-8')
        else:
          val1.frame = str[start:end]
        _v6 = val1.point
        _v7 = _v6.header
        start = end
        end += 4
        (_v7.seq,) = _get_struct_I().unpack(str[start:end])
        _v8 = _v7.stamp
        _x = _v8
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v7.frame_id = str[start:end].decode('utf-8')
        else:
          _v7.frame_id = str[start:end]
        _v9 = _v6.point
        _x = _v9
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v10 = val1.size
        _x = _v10
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8')
        else:
          val1.label = str[start:end]
        start = end
        end += 4
        (val1.confidence,) = _get_struct_f().unpack(str[start:end])
        self.unknown_objects.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.unknown_left_cluster = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.unknown_left_cluster.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.unknown_left_of = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.unknown_left_of.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.unknown_right_cluster = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.unknown_right_cluster.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.unknown_right_of = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.unknown_right_of.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.left_cluster)
      buff.write(_struct_I.pack(length))
      for val1 in self.left_cluster:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.left_of)
      buff.write(_struct_I.pack(length))
      for val1 in self.left_of:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.right_cluster)
      buff.write(_struct_I.pack(length))
      for val1 in self.right_cluster:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.right_of)
      buff.write(_struct_I.pack(length))
      for val1 in self.right_of:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.unknown_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.unknown_objects:
        _x = val1.frame
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v11 = val1.point
        _v12 = _v11.header
        buff.write(_get_struct_I().pack(_v12.seq))
        _v13 = _v12.stamp
        _x = _v13
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v12.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v14 = _v11.point
        _x = _v14
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v15 = val1.size
        _x = _v15
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_f().pack(val1.confidence))
      length = len(self.unknown_left_cluster)
      buff.write(_struct_I.pack(length))
      for val1 in self.unknown_left_cluster:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.unknown_left_of)
      buff.write(_struct_I.pack(length))
      for val1 in self.unknown_left_of:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.unknown_right_cluster)
      buff.write(_struct_I.pack(length))
      for val1 in self.unknown_right_cluster:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.unknown_right_of)
      buff.write(_struct_I.pack(length))
      for val1 in self.unknown_right_of:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.left_cluster is None:
        self.left_cluster = None
      if self.left_of is None:
        self.left_of = None
      if self.right_cluster is None:
        self.right_cluster = None
      if self.right_of is None:
        self.right_of = None
      if self.unknown_objects is None:
        self.unknown_objects = None
      if self.unknown_left_cluster is None:
        self.unknown_left_cluster = None
      if self.unknown_left_of is None:
        self.unknown_left_of = None
      if self.unknown_right_cluster is None:
        self.unknown_right_cluster = None
      if self.unknown_right_of is None:
        self.unknown_right_of = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.left_cluster = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.left_cluster.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.left_of = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.left_of.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.right_cluster = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.right_cluster.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.right_of = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.right_of.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.unknown_objects = []
      for i in range(0, length):
        val1 = tum_alle_common_msgs.msg.msg3DPrediction()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.frame = str[start:end].decode('utf-8')
        else:
          val1.frame = str[start:end]
        _v16 = val1.point
        _v17 = _v16.header
        start = end
        end += 4
        (_v17.seq,) = _get_struct_I().unpack(str[start:end])
        _v18 = _v17.stamp
        _x = _v18
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v17.frame_id = str[start:end].decode('utf-8')
        else:
          _v17.frame_id = str[start:end]
        _v19 = _v16.point
        _x = _v19
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v20 = val1.size
        _x = _v20
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8')
        else:
          val1.label = str[start:end]
        start = end
        end += 4
        (val1.confidence,) = _get_struct_f().unpack(str[start:end])
        self.unknown_objects.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.unknown_left_cluster = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.unknown_left_cluster.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.unknown_left_of = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.unknown_left_of.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.unknown_right_cluster = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.unknown_right_cluster.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.unknown_right_of = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.unknown_right_of.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
class srvFreeSpace(object):
  _type          = 'tum_alle_common_msgs/srvFreeSpace'
  _md5sum = 'e7bbf846ac124617879d82f8cbf6f51d'
  _request_class  = srvFreeSpaceRequest
  _response_class = srvFreeSpaceResponse
