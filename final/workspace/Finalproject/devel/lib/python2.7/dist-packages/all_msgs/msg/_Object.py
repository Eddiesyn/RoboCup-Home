# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from all_msgs/Object.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class Object(genpy.Message):
  _md5sum = "91171f25471df23310fdf72d759cfc7e"
  _type = "all_msgs/Object"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 id

geometry_msgs/PointStamped world_pose
geometry_msgs/PointStamped cam_pose

float32 heading
float32 velocity

float32 width
float32 length


float32 semantic_confidence
string semantic_name
uint32 semantic_id

uint32 r
uint32 g
uint32 b

bool is_track
bool is_target

================================================================================
MSG: geometry_msgs/PointStamped
# This represents a Point with reference coordinate frame and timestamp
Header header
Point point

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['id','world_pose','cam_pose','heading','velocity','width','length','semantic_confidence','semantic_name','semantic_id','r','g','b','is_track','is_target']
  _slot_types = ['int32','geometry_msgs/PointStamped','geometry_msgs/PointStamped','float32','float32','float32','float32','float32','string','uint32','uint32','uint32','uint32','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,world_pose,cam_pose,heading,velocity,width,length,semantic_confidence,semantic_name,semantic_id,r,g,b,is_track,is_target

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Object, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.world_pose is None:
        self.world_pose = geometry_msgs.msg.PointStamped()
      if self.cam_pose is None:
        self.cam_pose = geometry_msgs.msg.PointStamped()
      if self.heading is None:
        self.heading = 0.
      if self.velocity is None:
        self.velocity = 0.
      if self.width is None:
        self.width = 0.
      if self.length is None:
        self.length = 0.
      if self.semantic_confidence is None:
        self.semantic_confidence = 0.
      if self.semantic_name is None:
        self.semantic_name = ''
      if self.semantic_id is None:
        self.semantic_id = 0
      if self.r is None:
        self.r = 0
      if self.g is None:
        self.g = 0
      if self.b is None:
        self.b = 0
      if self.is_track is None:
        self.is_track = False
      if self.is_target is None:
        self.is_target = False
    else:
      self.id = 0
      self.world_pose = geometry_msgs.msg.PointStamped()
      self.cam_pose = geometry_msgs.msg.PointStamped()
      self.heading = 0.
      self.velocity = 0.
      self.width = 0.
      self.length = 0.
      self.semantic_confidence = 0.
      self.semantic_name = ''
      self.semantic_id = 0
      self.r = 0
      self.g = 0
      self.b = 0
      self.is_track = False
      self.is_target = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i3I().pack(_x.id, _x.world_pose.header.seq, _x.world_pose.header.stamp.secs, _x.world_pose.header.stamp.nsecs))
      _x = self.world_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3d3I().pack(_x.world_pose.point.x, _x.world_pose.point.y, _x.world_pose.point.z, _x.cam_pose.header.seq, _x.cam_pose.header.stamp.secs, _x.cam_pose.header.stamp.nsecs))
      _x = self.cam_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3d5f().pack(_x.cam_pose.point.x, _x.cam_pose.point.y, _x.cam_pose.point.z, _x.heading, _x.velocity, _x.width, _x.length, _x.semantic_confidence))
      _x = self.semantic_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4I2B().pack(_x.semantic_id, _x.r, _x.g, _x.b, _x.is_track, _x.is_target))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.world_pose is None:
        self.world_pose = geometry_msgs.msg.PointStamped()
      if self.cam_pose is None:
        self.cam_pose = geometry_msgs.msg.PointStamped()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.id, _x.world_pose.header.seq, _x.world_pose.header.stamp.secs, _x.world_pose.header.stamp.nsecs,) = _get_struct_i3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.world_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.world_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.world_pose.point.x, _x.world_pose.point.y, _x.world_pose.point.z, _x.cam_pose.header.seq, _x.cam_pose.header.stamp.secs, _x.cam_pose.header.stamp.nsecs,) = _get_struct_3d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cam_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.cam_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 44
      (_x.cam_pose.point.x, _x.cam_pose.point.y, _x.cam_pose.point.z, _x.heading, _x.velocity, _x.width, _x.length, _x.semantic_confidence,) = _get_struct_3d5f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.semantic_name = str[start:end].decode('utf-8')
      else:
        self.semantic_name = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.semantic_id, _x.r, _x.g, _x.b, _x.is_track, _x.is_target,) = _get_struct_4I2B().unpack(str[start:end])
      self.is_track = bool(self.is_track)
      self.is_target = bool(self.is_target)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i3I().pack(_x.id, _x.world_pose.header.seq, _x.world_pose.header.stamp.secs, _x.world_pose.header.stamp.nsecs))
      _x = self.world_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3d3I().pack(_x.world_pose.point.x, _x.world_pose.point.y, _x.world_pose.point.z, _x.cam_pose.header.seq, _x.cam_pose.header.stamp.secs, _x.cam_pose.header.stamp.nsecs))
      _x = self.cam_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3d5f().pack(_x.cam_pose.point.x, _x.cam_pose.point.y, _x.cam_pose.point.z, _x.heading, _x.velocity, _x.width, _x.length, _x.semantic_confidence))
      _x = self.semantic_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4I2B().pack(_x.semantic_id, _x.r, _x.g, _x.b, _x.is_track, _x.is_target))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.world_pose is None:
        self.world_pose = geometry_msgs.msg.PointStamped()
      if self.cam_pose is None:
        self.cam_pose = geometry_msgs.msg.PointStamped()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.id, _x.world_pose.header.seq, _x.world_pose.header.stamp.secs, _x.world_pose.header.stamp.nsecs,) = _get_struct_i3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.world_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.world_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.world_pose.point.x, _x.world_pose.point.y, _x.world_pose.point.z, _x.cam_pose.header.seq, _x.cam_pose.header.stamp.secs, _x.cam_pose.header.stamp.nsecs,) = _get_struct_3d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cam_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.cam_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 44
      (_x.cam_pose.point.x, _x.cam_pose.point.y, _x.cam_pose.point.z, _x.heading, _x.velocity, _x.width, _x.length, _x.semantic_confidence,) = _get_struct_3d5f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.semantic_name = str[start:end].decode('utf-8')
      else:
        self.semantic_name = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.semantic_id, _x.r, _x.g, _x.b, _x.is_track, _x.is_target,) = _get_struct_4I2B().unpack(str[start:end])
      self.is_track = bool(self.is_track)
      self.is_target = bool(self.is_target)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d3I = None
def _get_struct_3d3I():
    global _struct_3d3I
    if _struct_3d3I is None:
        _struct_3d3I = struct.Struct("<3d3I")
    return _struct_3d3I
_struct_i3I = None
def _get_struct_i3I():
    global _struct_i3I
    if _struct_i3I is None:
        _struct_i3I = struct.Struct("<i3I")
    return _struct_i3I
_struct_3d5f = None
def _get_struct_3d5f():
    global _struct_3d5f
    if _struct_3d5f is None:
        _struct_3d5f = struct.Struct("<3d5f")
    return _struct_3d5f
_struct_4I2B = None
def _get_struct_4I2B():
    global _struct_4I2B
    if _struct_4I2B is None:
        _struct_4I2B = struct.Struct("<4I2B")
    return _struct_4I2B
