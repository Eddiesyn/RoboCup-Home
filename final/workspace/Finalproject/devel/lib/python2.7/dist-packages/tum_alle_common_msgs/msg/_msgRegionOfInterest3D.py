# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tum_alle_common_msgs/msgRegionOfInterest3D.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class msgRegionOfInterest3D(genpy.Message):
  _md5sum = "1e870a0c6556353ad469201e1bde951a"
  _type = "tum_alle_common_msgs/msgRegionOfInterest3D"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string  frame
float64 x_offset
float64 y_offset
float64 z_offset
float64 height
float64 width
float64 depth
"""
  __slots__ = ['frame','x_offset','y_offset','z_offset','height','width','depth']
  _slot_types = ['string','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       frame,x_offset,y_offset,z_offset,height,width,depth

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(msgRegionOfInterest3D, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.frame is None:
        self.frame = ''
      if self.x_offset is None:
        self.x_offset = 0.
      if self.y_offset is None:
        self.y_offset = 0.
      if self.z_offset is None:
        self.z_offset = 0.
      if self.height is None:
        self.height = 0.
      if self.width is None:
        self.width = 0.
      if self.depth is None:
        self.depth = 0.
    else:
      self.frame = ''
      self.x_offset = 0.
      self.y_offset = 0.
      self.z_offset = 0.
      self.height = 0.
      self.width = 0.
      self.depth = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.frame
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_6d().pack(_x.x_offset, _x.y_offset, _x.z_offset, _x.height, _x.width, _x.depth))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame = str[start:end].decode('utf-8')
      else:
        self.frame = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.x_offset, _x.y_offset, _x.z_offset, _x.height, _x.width, _x.depth,) = _get_struct_6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.frame
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_6d().pack(_x.x_offset, _x.y_offset, _x.z_offset, _x.height, _x.width, _x.depth))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame = str[start:end].decode('utf-8')
      else:
        self.frame = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.x_offset, _x.y_offset, _x.z_offset, _x.height, _x.width, _x.depth,) = _get_struct_6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
