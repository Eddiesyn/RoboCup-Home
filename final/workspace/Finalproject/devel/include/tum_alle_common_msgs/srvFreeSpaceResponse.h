// Generated by gencpp from file tum_alle_common_msgs/srvFreeSpaceResponse.msg
// DO NOT EDIT!


#ifndef TUM_ALLE_COMMON_MSGS_MESSAGE_SRVFREESPACERESPONSE_H
#define TUM_ALLE_COMMON_MSGS_MESSAGE_SRVFREESPACERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <tum_alle_common_msgs/msg3DPrediction.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace tum_alle_common_msgs
{
template <class ContainerAllocator>
struct srvFreeSpaceResponse_
{
  typedef srvFreeSpaceResponse_<ContainerAllocator> Type;

  srvFreeSpaceResponse_()
    : left_cluster()
    , left_of()
    , right_cluster()
    , right_of()
    , unknown_objects()
    , unknown_left_cluster()
    , unknown_left_of()
    , unknown_right_cluster()
    , unknown_right_of()  {
    }
  srvFreeSpaceResponse_(const ContainerAllocator& _alloc)
    : left_cluster(_alloc)
    , left_of(_alloc)
    , right_cluster(_alloc)
    , right_of(_alloc)
    , unknown_objects(_alloc)
    , unknown_left_cluster(_alloc)
    , unknown_left_of(_alloc)
    , unknown_right_cluster(_alloc)
    , unknown_right_of(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _left_cluster_type;
  _left_cluster_type left_cluster;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _left_of_type;
  _left_of_type left_of;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _right_cluster_type;
  _right_cluster_type right_cluster;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _right_of_type;
  _right_of_type right_of;

   typedef std::vector< ::tum_alle_common_msgs::msg3DPrediction_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::tum_alle_common_msgs::msg3DPrediction_<ContainerAllocator> >::other >  _unknown_objects_type;
  _unknown_objects_type unknown_objects;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _unknown_left_cluster_type;
  _unknown_left_cluster_type unknown_left_cluster;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _unknown_left_of_type;
  _unknown_left_of_type unknown_left_of;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _unknown_right_cluster_type;
  _unknown_right_cluster_type unknown_right_cluster;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _unknown_right_of_type;
  _unknown_right_of_type unknown_right_of;





  typedef boost::shared_ptr< ::tum_alle_common_msgs::srvFreeSpaceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tum_alle_common_msgs::srvFreeSpaceResponse_<ContainerAllocator> const> ConstPtr;

}; // struct srvFreeSpaceResponse_

typedef ::tum_alle_common_msgs::srvFreeSpaceResponse_<std::allocator<void> > srvFreeSpaceResponse;

typedef boost::shared_ptr< ::tum_alle_common_msgs::srvFreeSpaceResponse > srvFreeSpaceResponsePtr;
typedef boost::shared_ptr< ::tum_alle_common_msgs::srvFreeSpaceResponse const> srvFreeSpaceResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tum_alle_common_msgs::srvFreeSpaceResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tum_alle_common_msgs::srvFreeSpaceResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace tum_alle_common_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'tum_alle_common_msgs': ['/home/atHomeSS18/God-Watcher/workspace/Finalproject/src/tum_alle_common_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::tum_alle_common_msgs::srvFreeSpaceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tum_alle_common_msgs::srvFreeSpaceResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tum_alle_common_msgs::srvFreeSpaceResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tum_alle_common_msgs::srvFreeSpaceResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tum_alle_common_msgs::srvFreeSpaceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tum_alle_common_msgs::srvFreeSpaceResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tum_alle_common_msgs::srvFreeSpaceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9ded637c096954c41cf2482a7ee7f728";
  }

  static const char* value(const ::tum_alle_common_msgs::srvFreeSpaceResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9ded637c096954c4ULL;
  static const uint64_t static_value2 = 0x1cf2482a7ee7f728ULL;
};

template<class ContainerAllocator>
struct DataType< ::tum_alle_common_msgs::srvFreeSpaceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tum_alle_common_msgs/srvFreeSpaceResponse";
  }

  static const char* value(const ::tum_alle_common_msgs::srvFreeSpaceResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tum_alle_common_msgs::srvFreeSpaceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point[] left_cluster\n\
geometry_msgs/Point[] left_of\n\
geometry_msgs/Point[] right_cluster\n\
geometry_msgs/Point[] right_of\n\
\n\
msg3DPrediction[] unknown_objects\n\
geometry_msgs/Point[] unknown_left_cluster\n\
geometry_msgs/Point[] unknown_left_of\n\
geometry_msgs/Point[] unknown_right_cluster\n\
geometry_msgs/Point[] unknown_right_of\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: tum_alle_common_msgs/msg3DPrediction\n\
string                      frame\n\
geometry_msgs/PointStamped  point\n\
geometry_msgs/Vector3       size\n\
string                      label\n\
float32                     confidence\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PointStamped\n\
# This represents a Point with reference coordinate frame and timestamp\n\
Header header\n\
Point point\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::tum_alle_common_msgs::srvFreeSpaceResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tum_alle_common_msgs::srvFreeSpaceResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left_cluster);
      stream.next(m.left_of);
      stream.next(m.right_cluster);
      stream.next(m.right_of);
      stream.next(m.unknown_objects);
      stream.next(m.unknown_left_cluster);
      stream.next(m.unknown_left_of);
      stream.next(m.unknown_right_cluster);
      stream.next(m.unknown_right_of);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct srvFreeSpaceResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tum_alle_common_msgs::srvFreeSpaceResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tum_alle_common_msgs::srvFreeSpaceResponse_<ContainerAllocator>& v)
  {
    s << indent << "left_cluster[]" << std::endl;
    for (size_t i = 0; i < v.left_cluster.size(); ++i)
    {
      s << indent << "  left_cluster[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.left_cluster[i]);
    }
    s << indent << "left_of[]" << std::endl;
    for (size_t i = 0; i < v.left_of.size(); ++i)
    {
      s << indent << "  left_of[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.left_of[i]);
    }
    s << indent << "right_cluster[]" << std::endl;
    for (size_t i = 0; i < v.right_cluster.size(); ++i)
    {
      s << indent << "  right_cluster[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.right_cluster[i]);
    }
    s << indent << "right_of[]" << std::endl;
    for (size_t i = 0; i < v.right_of.size(); ++i)
    {
      s << indent << "  right_of[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.right_of[i]);
    }
    s << indent << "unknown_objects[]" << std::endl;
    for (size_t i = 0; i < v.unknown_objects.size(); ++i)
    {
      s << indent << "  unknown_objects[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::tum_alle_common_msgs::msg3DPrediction_<ContainerAllocator> >::stream(s, indent + "    ", v.unknown_objects[i]);
    }
    s << indent << "unknown_left_cluster[]" << std::endl;
    for (size_t i = 0; i < v.unknown_left_cluster.size(); ++i)
    {
      s << indent << "  unknown_left_cluster[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.unknown_left_cluster[i]);
    }
    s << indent << "unknown_left_of[]" << std::endl;
    for (size_t i = 0; i < v.unknown_left_of.size(); ++i)
    {
      s << indent << "  unknown_left_of[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.unknown_left_of[i]);
    }
    s << indent << "unknown_right_cluster[]" << std::endl;
    for (size_t i = 0; i < v.unknown_right_cluster.size(); ++i)
    {
      s << indent << "  unknown_right_cluster[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.unknown_right_cluster[i]);
    }
    s << indent << "unknown_right_of[]" << std::endl;
    for (size_t i = 0; i < v.unknown_right_of.size(); ++i)
    {
      s << indent << "  unknown_right_of[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.unknown_right_of[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TUM_ALLE_COMMON_MSGS_MESSAGE_SRVFREESPACERESPONSE_H
