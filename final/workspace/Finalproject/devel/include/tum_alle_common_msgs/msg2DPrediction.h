// Generated by gencpp from file tum_alle_common_msgs/msg2DPrediction.msg
// DO NOT EDIT!


#ifndef TUM_ALLE_COMMON_MSGS_MESSAGE_MSG2DPREDICTION_H
#define TUM_ALLE_COMMON_MSGS_MESSAGE_MSG2DPREDICTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tum_alle_common_msgs
{
template <class ContainerAllocator>
struct msg2DPrediction_
{
  typedef msg2DPrediction_<ContainerAllocator> Type;

  msg2DPrediction_()
    : label()
    , confidence(0.0)
    , rect()  {
      rect.assign(0);
  }
  msg2DPrediction_(const ContainerAllocator& _alloc)
    : label(_alloc)
    , confidence(0.0)
    , rect()  {
  (void)_alloc;
      rect.assign(0);
  }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _label_type;
  _label_type label;

   typedef double _confidence_type;
  _confidence_type confidence;

   typedef boost::array<int32_t, 4>  _rect_type;
  _rect_type rect;





  typedef boost::shared_ptr< ::tum_alle_common_msgs::msg2DPrediction_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tum_alle_common_msgs::msg2DPrediction_<ContainerAllocator> const> ConstPtr;

}; // struct msg2DPrediction_

typedef ::tum_alle_common_msgs::msg2DPrediction_<std::allocator<void> > msg2DPrediction;

typedef boost::shared_ptr< ::tum_alle_common_msgs::msg2DPrediction > msg2DPredictionPtr;
typedef boost::shared_ptr< ::tum_alle_common_msgs::msg2DPrediction const> msg2DPredictionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tum_alle_common_msgs::msg2DPrediction_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tum_alle_common_msgs::msg2DPrediction_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace tum_alle_common_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'tum_alle_common_msgs': ['/home/atHomeSS18/God-Watcher/workspace/Finalproject/src/tum_alle_common_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::tum_alle_common_msgs::msg2DPrediction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tum_alle_common_msgs::msg2DPrediction_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tum_alle_common_msgs::msg2DPrediction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tum_alle_common_msgs::msg2DPrediction_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tum_alle_common_msgs::msg2DPrediction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tum_alle_common_msgs::msg2DPrediction_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tum_alle_common_msgs::msg2DPrediction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e72cd172d1661b939105f76a5f0e9bca";
  }

  static const char* value(const ::tum_alle_common_msgs::msg2DPrediction_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe72cd172d1661b93ULL;
  static const uint64_t static_value2 = 0x9105f76a5f0e9bcaULL;
};

template<class ContainerAllocator>
struct DataType< ::tum_alle_common_msgs::msg2DPrediction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tum_alle_common_msgs/msg2DPrediction";
  }

  static const char* value(const ::tum_alle_common_msgs::msg2DPrediction_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tum_alle_common_msgs::msg2DPrediction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string    label\n\
float64   confidence\n\
int32[4]  rect\n\
#geometry_msgs/Point[] object_centers\n\
";
  }

  static const char* value(const ::tum_alle_common_msgs::msg2DPrediction_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tum_alle_common_msgs::msg2DPrediction_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.label);
      stream.next(m.confidence);
      stream.next(m.rect);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct msg2DPrediction_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tum_alle_common_msgs::msg2DPrediction_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tum_alle_common_msgs::msg2DPrediction_<ContainerAllocator>& v)
  {
    s << indent << "label: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.label);
    s << indent << "confidence: ";
    Printer<double>::stream(s, indent + "  ", v.confidence);
    s << indent << "rect[]" << std::endl;
    for (size_t i = 0; i < v.rect.size(); ++i)
    {
      s << indent << "  rect[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.rect[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TUM_ALLE_COMMON_MSGS_MESSAGE_MSG2DPREDICTION_H
